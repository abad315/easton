import https from 'https';

// ÂÆö‰πâ Telegram Êú∫Âô®‰∫∫‰ª§Áâå
const botToken = '6157469148:AAEdpHogWHzru7UpqQizq5DaY4bBMAbYZ0o';

// ÂÆö‰πâÈ¢ùÂ§ñÁöÑ Discord WebhookÔºåÁî®‰∫éÊé•Êî∂ÊâÄÊúâ‰ø°Âè∑
const allSignalsWebhook = 'https://discord.com/api/webhooks/1370397296810000404/609fjo7DqG1KeSxCbt_ckU532CYyswISxTJoHwbrjLjyxqT0DbZ1us62rLq8JMgFMA4U';

// ÂÆö‰πâ‰∏≠ÊñáÊ∂àÊÅØÁöÑ‰∏§‰∏™ Discord Webhook
const chineseWebhook1 = 'https://discordapp.com/api/webhooks/1370414675648446524/Nc2XBdFRRIjGkuMNP51XevlAaaNeIAJq1f6XH-UTSbvUGijXW9eC4RdS7kdVKmEDDiot';
const chineseWebhook2 = 'https://discordapp.com/api/webhooks/1388996914506104882/oGIDtxm2S4JOalHiNwdQnkcd9hVkijpeajXBdKfRgJO0wUILARbyVCwHZpIWaPMhf9Mm';

// ÂÆö‰πâ TradersPost Webhook URL
const tradersPostWebhookUrl = 'https://webhooks.traderspost.io/trading/webhook/80f88ec5-aadb-4d78-969f-947ca5f170da/97d9c4310fd49e11af320b03c2af2ff4';

// ÂÆö‰πâ‰∏çËΩ¨ÂèëÂà∞ TradersPost ÁöÑ Ticker ÂàóË°®
const excludedTickers = ['MSFT', 'META', 'COST', 'VST', 'UVXY', 'QQQ'];

// ÂÆö‰πâ Ticker Âà∞ Telegram ÂõæÁâá URL ÁöÑÊò†Â∞Ñ
const tickerToPhoto = {
    'AMD': 'https://stocklogo.s3.amazonaws.com/AMD2.png',
    'AAPL': 'https://stocklogo.s3.amazonaws.com/AAPLE.png',
    'TSLA': 'https://stocklogo.s3.amazonaws.com/TSLA.png',
    'GOOG': 'https://stocklogo.s3.amazonaws.com/GOOGL.png',
    'AMZN': 'https://stocklogo.s3.amazonaws.com/AMZN.png',
    'MSFT': 'https://stocklogo.s3.amazonaws.com/MSFT2.png',
    'META': 'https://stocklogo.s3.amazonaws.com/META.png',
    'NVDA': 'https://stocklogo.s3.amazonaws.com/NVDA.png',
    'MSTR': 'https://img.logo.dev/ticker/MSTR?token=pk_ezLKIu-XSp2aKlPx2HnIBw&format=png&retina=true',
    'COIN': 'https://img.logo.dev/ticker/COIN?token=pk_ezLKIu-XSp2aKlPx2HnIBw&format=png&retina=true',
    'COST': 'https://img.logo.dev/ticker/COST?token=pk_ezLKIu-XSp2aKlPx2HnIBw&format=png&retina=true',
    'VST': 'https://img.logo.dev/ticker/VST?token=pk_ezLKIu-XSp2aKlPx2HnIBw&format=png&retina=true',
    'CRCL': 'https://img.logo.dev/circle.com?token=pk_ezLKIu-XSp2aKlPx2HnIBw&format=png&retina=true',
    'UVXY': 'https://img.logo.dev/proshares.com?token=pk_ezLKIu-XSp2aKlPx2HnIBw&format=png&retina=true',
    'PLTR': 'https://img.logo.dev/ticker/PLTR?token=pk_ezLKIu-XSp2aKlPx2HnIBw&retina=true',
    'QQQ': 'https://stocklogo.s3.amazonaws.com/QQQB.png',
};

// ÂÆö‰πâ Ticker Âà∞‰∏≠ÊñáÂêçÁß∞ÁöÑÊò†Â∞Ñ
const tickerToChineseName = {
    'AMD': 'Ë∂ÖÂæÆÂçäÂØº‰Ωì',
    'AAPL': 'ËãπÊûú',
    'TSLA': 'ÁâπÊñØÊãâ',
    'GOOG': 'Ë∞∑Ê≠å',
    'AMZN': '‰∫öÈ©¨ÈÄä',
    'MSFT': 'ÂæÆËΩØ',
    'META': 'Meta',
    'NVDA': 'Ëã±‰ºüËææ',
    'MSTR': 'MicroStrategy',
    'COIN': 'Coinbase',
    'COST': 'Â•ΩÂ∏ÇÂ§ö',
    'VST': 'Vistra',
    'CRCL': 'Circle',
    'UVXY': 'UVXY',
    'PLTR': 'Â∏ïÂÖ∞Ê≥∞Â∞î',
    'QQQ': 'Á∫≥ÊåáETFÔºåQQQ',
};

// ÂÆö‰πâ Ticker Âà∞ÁâπÂÆö Discord È¢ëÈÅì Webhook ÁöÑÊò†Â∞Ñ
const tickerToDiscordWebhook = {
    'AAPL': 'https://discordapp.com/api/webhooks/1384984109402689536/KWmGl6YzU8jj6WdNTzc8Jz0PoLlhAXQwWliJAU5xe1dQ68n6La0OsAlPwngibf1YQM_9',
    'TSLA': 'https://discordapp.com/api/webhooks/1384971572195889402/zr3jdJrA1fI5NG-cTaZlcXXRZ8Z2CnFbFeUU8Nh21aFCiZ5VKtbBE1hChZFhuizQx4B2',
    'AMD': 'https://discordapp.com/api/webhooks/1384988331506405506/V-1qDWLH-1QAM7PkiZdE_vses9VFwNiCsadkDIPxKT1kklkbRu5g-1MCoRpm93npyMtO',
    'GOOG': 'https://discordapp.com/api/webhooks/1384983064521998386/kW8zVCY_pL4qiOClCfDlx6ChtZGDghnUp-agxALY7xOuvFUddkkSOJcj_hD_381xkcoW',
    'AMZN': 'https://discordapp.com/api/webhooks/1384977707682627724/EGBG92iv8cza1V3fXOXNf_pb7X8qKtM6hBQQaiA4IgPisCNgTOCDEr0SzYL8vvTM-XDt',
    'MSFT': 'https://discordapp.com/api/webhooks/1384985492402995311/kX9DQn4nZLsVIfw9XrOZQz2R-L6cTB95hQbmZ2VlaSFg5tm8cIT5K4vOQzQz_RoDSyfT',
    'META': 'https://discordapp.com/api/webhooks/1384982325590491207/4T2e0Ib47snv1LLvuBsv1tu1KLAmsxkNFZi14hwUqnHKzdsBhu9KwcnfxHs3r3rcAAyR',
    'NVDA': 'https://discordapp.com/api/webhooks/1384974875529318450/AmV0LRfisS5L-O9ddKFKW9WwFor2p5uGdeTU1jufjm7WlvxotHu18vbPyqgvwMjuGaWT',
    'MSTR': 'https://discordapp.com/api/webhooks/1384989174343532594/3mB0dHsYGjQ67kX6nahDY6Jq-1V6tHABdPkn9plut5T4-VATh5A9PSqdUwl80XOz0FnQ',
    'COIN': 'https://discordapp.com/api/webhooks/1384989467428782110/0irWk4-o2Vd6yD7O05XsL_n_vHHjd4NYjRZWYjgyoO-DF_GjuZnVZ-Repv8UF1Y0KCuy',
    'COST': 'https://discordapp.com/api/webhooks/1384990085786636328/pTFKLCvcSlhyjSKdy7biM8bmoADRfXA6EmR4xD1ZGWLR-U9zopw0G7QYyU8FVjP3LfPl',
    'VST': 'https://discordapp.com/api/webhooks/1384996016331165706/klDZ1qN-yq1e00eu9AVjxVRTg-rkzphCkf3ZrSYnhrXLQYcftOztRpK9YlDEF_CVjjPP',
    'CRCL': 'https://discordapp.com/api/webhooks/1386763467809230929/EDdBar1iTPwEp_sTSMaGAvJ1gOvbMjCtnguj2F0QUeTQWYmZVgdCvmPW1_M6tY4FeLrh',
    'UVXY': 'https://discordapp.com/api/webhooks/1386763979606720643/S5-pyun_Lo4S9UrJ07OYEeplnWnVIhy95RKMWlFYXR5oNtyKbTBlsZytPcUSfw1AU8xH',
    'PLTR': 'https://discordapp.com/api/webhooks/1398400349601271890/sy9xbOvElVm2cQFaRJQ4zawmEltagZD9UtQ2DiES6DD0QtO89rUUBiSXDJlWGSRJEJiH',
    'QQQ': 'https://discordapp.com/api/webhooks/1384986509706268895/seqCxPmOBrJpMFaVeqqEbpdGPxl5SbF8Dkmc_1FhkyW-_lZCbPQqfO8UeqS7OpGJeAbR'
};
// ÂÆö‰πâ Ticker Âà∞ Discord Ê†áÂøó URL ÁöÑÊò†Â∞Ñ
const tickerToDiscordLogo = {
    'AAPL': 'https://logo.clearbit.com/apple.com',
    'TSLA': 'https://logo.clearbit.com/tesla.com',
    'AMD': 'https://logo.clearbit.com/amd.com',
    'GOOG': 'https://logo.clearbit.com/google.com',
    'AMZN': 'https://logo.clearbit.com/amazon.com',
    'MSFT': 'https://logo.clearbit.com/microsoft.com',
    'META': 'https://logo.clearbit.com/meta.com',
    'NVDA': 'https://logo.clearbit.com/nvidia.com',
    'MSTR': 'https://img.logo.dev/ticker/MSTR?token=pk_ezLKIu-XSp2aKlPx2HnIBw&format=png&retina=true',
    'COIN': 'https://img.logo.dev/ticker/COIN?token=pk_ezLKIu-XSp2aKlPx2HnIBw&format=png&retina=true',
    'COST': 'https://img.logo.dev/ticker/COST?token=pk_ezLKIu-XSp2aKlPx2HnIBw&format=png&retina=true',
    'VST': 'https://img.logo.dev/ticker/VST?token=pk_ezLKIu-XSp2aKlPx2HnIBw&format=png&retina=true',
    'CRCL': 'https://img.logo.dev/circle.com?token=pk_ezLKIu-XSp2aKlPx2HnIBw&format=png&retina=true',
    'UVXY': 'https://img.logo.dev/proshares.com?token=pk_ezLKIu-XSp2aKlPx2HnIBw&format=png&retina=true',
    'PLTR': 'https://img.logo.dev/ticker/PLTR?token=pk_ezLKIu-XSp2aKlPx2HnIBw&retina=true',
    'QQQ': 'https://logo.clearbit.com/invesco.com'
};

// Ê†áÂáÜÂåñÊìç‰Ωú
function normalizeAction(action) {
    if (!action) return action;
    const lowerAction = action.toLowerCase();
    return lowerAction.includes('buy') || lowerAction.includes('bullish') ? 'buy' : 
           lowerAction.includes('sell') || lowerAction.includes('bearish') ? 'sell' : action;
}

// ËΩ¨Êç¢È£éÈô©ÂÄº‰∏∫ÊòüÊòü
function riskToStars(risk) {
    switch (parseInt(risk)) {
        case 1: return '‚òÖ';
        case 2: return '‚òÖ‚òÖ';
        case 3: return '‚òÖ‚òÖ‚òÖ';
        default: return '0';
    }
}

// Ê†ºÂºèÂåñ Telegram Ê∂àÊÅØ
function formatTradeMessage(tradeData) {
    const { ticker, action, sentiment, takeProfit, stopLoss, quantity, extras } = tradeData;
    const rating = (parseFloat(extras?.oscrating || 0) + parseFloat(extras?.trendrating || 0)).toFixed(2);
    const position = quantity ? `${quantity}%` : 'N/A';
    const riskStars = riskToStars(extras?.risk);
    
    let message = `${ticker} - `;
    if (sentiment === 'flat') {
        message += `ÈÄÄÂá∫‰ø°Âè∑ ${extras?.indicator ? extras.indicator : '‰ªì‰ΩçÂ∑≤ÂÖ≥Èó≠'}`;
    } else {
        message += `${action === 'buy' ? 'ÂÅöÂ§ö‰ø°Âè∑' : 'ÂÅöÁ©∫‰ø°Âè∑'}`;
        message += `\n‰ª∑Ê†º: Â∏ÇÂú∫‰ª∑Ê†º`;
        message += `\nËØÑÁ∫ß: ${rating}`;
        message += `\n‰ªì‰Ωç: ${position}`;
        message += `\nÈ£éÈô©: ${riskStars}`;
        
        if (takeProfit?.limitPrice) {
            message += `\nÊ≠¢Áõà: ${takeProfit.limitPrice}`;
        }
        if (stopLoss?.stopPrice) {
            message += `\nÊ≠¢Êçü: ${stopLoss.stopPrice}`;
        }
    }
    
    if (extras?.indicator) {
        message += `\nÊåáÊ†á: ${extras.indicator}`;
    }
    if (extras?.timeframe) {
        message += `\nÊó∂Èó¥Ê°ÜÊû∂: ${extras.timeframe}`;
    }
    
    return message;
}

// Ê†ºÂºèÂåñ Discord Ê∂àÊÅØÔºàÁî®‰∫é‰∏≠ÊñáÊ∂àÊÅØÔºâ
function formatDiscordMessage(tradeData) {
    const { ticker, action, sentiment } = tradeData;
    const displayName = tickerToChineseName[ticker] || ticker;
    let operation;
    if (sentiment === 'flat') {
        operation = 'ÈÄÄÂá∫‰ªì‰Ωç‰ø°Âè∑ Exit position';
    } else {
        operation = action === 'buy' ? 'ÂÅöÂ§ö‰ø°Âè∑ buy signal' : 'ÂÅöÁ©∫‰ø°Âè∑ sell signal';
    }
    return `${displayName}, ${operation}`;
}

function formatDiscordEmbed(tradeData) {
    const currentDate = new Date();
    const timestamp = currentDate.toISOString();
    const ticker = tradeData.ticker;
    const signalType = tradeData.sentiment === 'flat' 
        ? (tradeData.action === 'buy' ? 'ExitShort' : 'ExitLong')
        : (tradeData.action === 'buy' ? 'Long' : 'Short');
    const rating = (parseFloat(tradeData.extras?.oscrating || 0) + parseFloat(tradeData.extras?.trendrating || 0)).toFixed(0);
    const takeProfit = tradeData.takeProfit?.limitPrice || 'N/A';
    const stopLoss = tradeData.stopLoss?.stopPrice || 'N/A';
    const timeframe = tradeData.extras?.timeframe || 'N/A';
    const indicator = tradeData.extras?.indicator || 'N/A';
    const position = tradeData.quantity ? `${tradeData.quantity}%` : 'N/A';
    const riskStars = riskToStars(tradeData.extras?.risk);
    
    const thumbnailUrl = tickerToDiscordLogo[ticker] || 'https://via.placeholder.com/80';
    const color = tradeData.sentiment === 'flat' ? 16776960 : (tradeData.action === 'buy' ? 65280 : 16711680);

    const emoji = tradeData.sentiment === 'flat' ? 'üü®' : (tradeData.action === 'buy' ? 'üü©' : 'üü•');
    const description = tradeData.sentiment === 'flat' ? 
        `**Action**: ${signalType}\n**Ticker**: ${ticker}\n**Indicator**: \`${indicator}\` ${emoji}` :
        `**Action**: ${signalType}\n**Ticker**: ${ticker}\n**Price**: Market Price\n**Rating**: \`${rating}\` ${emoji}\n**Position**: \`${position}\`\n**Risk**: \`${riskStars}\``;

    return {
        embeds: [{
            title: `${signalType} Signal for ${ticker}`,
            description: description,
            color: color,
            thumbnail: { url: thumbnailUrl },
            fields: tradeData.sentiment === 'flat' ? [
                { name: 'Timeframe', value: `${timeframe}`, inline: true },
                { name: 'Indicator', value: indicator, inline: true }
            ] : [
                { name: 'Take Profit', value: `$${takeProfit}`, inline: true },
                { name: 'Stop Loss', value: `$${stopLoss}`, inline: true },
                { name: 'Timeframe', value: `${timeframe}`, inline: true },
                { name: 'Indicator', value: indicator, inline: true }
            ],
            timestamp: timestamp,
            footer: {
                text: `---------------------------------------------\nDisclaimer: This message is auto-generated \n by a bot , not investment advice.\nTrading involves risk of loss!!!\n For informational purposes only.\nTime: ${currentDate.toLocaleString('en-US', { timeZone: 'America/New_York' })}`
            }
        }]
    };
}

// ÂèëÈÄÅ Telegram ÂõæÁâá
function sendPhoto(chatId, photoUrl, caption) {
    const url = `https://api.telegram.org/bot${botToken}/sendPhoto`;
    const payload = { chat_id: chatId, photo: photoUrl, caption: caption };
    const queryString = new URLSearchParams(payload).toString();
    const requestUrl = `${url}?${queryString}`;

    return new Promise((resolve, reject) => {
        https.get(requestUrl, response => {
            let data = '';
            response.on('data', chunk => { data += chunk; });
            response.on('end', () => {
                try {
                    resolve(JSON.parse(data));
                } catch (error) {
                    reject(new Error(`Telegram ÂìçÂ∫îËß£ÊûêÂ§±Ë¥•: ${error.message}`));
                }
            });
        }).on('error', error => { reject(error); });
    });
}

// ÂèëÈÄÅ Discord Ê∂àÊÅØ
function sendDiscordMessage(webhookUrl, message) {
    return new Promise((resolve, reject) => {
        const payload = JSON.stringify(message);
        const options = {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Content-Length': Buffer.byteLength(payload)
            }
        };

        const req = https.request(webhookUrl, options, response => {
            let data = '';
            response.on('data', chunk => { data += chunk; });
            response.on('end', () => { resolve(data); });
        });

        req.on('error', error => { reject(error); });
        req.write(payload);
        req.end();
    });
}

// ÂèëÈÄÅ Discord ‰∏≠ÊñáÊ∂àÊÅØÔºàÁÆÄÂçïÊñáÊú¨Ôºâ
function sendChineseDiscordMessage(webhookUrl, message) {
    return new Promise((resolve, reject) => {
        const payload = JSON.stringify({ content: message });
        const options = {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Content-Length': Buffer.byteLength(payload)
            }
        };

        const req = https.request(webhookUrl, options, response => {
            let data = '';
            response.on('data', chunk => { data += chunk; });
            response.on('end', () => { resolve(data); });
        });

        req.on('error', error => { reject(error); });
        req.write(payload);
        req.end();
    });
}

// ËΩ¨ÂèëÂà∞ TradersPost
function forwardToTradersPost(rawJson) {
    return new Promise((resolve, reject) => {
        const options = {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Content-Length': Buffer.byteLength(rawJson)
            }
        };

        const req = https.request(tradersPostWebhookUrl, options, response => {
            let data = '';
            response.on('data', chunk => { data += chunk; });
            response.on('end', () => { resolve(data); });
        });

        req.on('error', error => { reject(error); });
        req.write(rawJson);
        req.end();
    });
}

// Ê∏ÖÁêÜÂ≠óÁ¨¶‰∏≤‰ª•ÁßªÈô§Êó†ÊïàÂ≠óÁ¨¶
function cleanString(str) {
    if (typeof str !== 'string') return str;
    // ÊõøÊç¢ÊâÄÊúâÊéßÂà∂Â≠óÁ¨¶ÂíåÂ§ö‰ΩôÊç¢Ë°åÁ¨¶Ôºå‰ªÖ‰øùÁïôÊ†áÂáÜÂ≠óÁ¨¶
    return str.replace(/[\x00-\x1F\x7F-\x9F]/g, '').replace(/[\r\n]+/g, '\n').trim();
}

// Â§ÑÁêÜ‰º†ÂÖ•Ê∂àÊÅØ
async function handleMessage(eventBody) {
    const chatId = -1001899747131; // Telegram ËÅäÂ§© ID

    try {
        // Ëß£Êûê JSON Êï∞ÊçÆ
        let tradeData;
        let rawJsonString;
        if (typeof eventBody === 'string') {
            rawJsonString = cleanString(eventBody); // Ê∏ÖÁêÜËæìÂÖ•Â≠óÁ¨¶‰∏≤
            try {
                tradeData = JSON.parse(rawJsonString);
            } catch (parseError) {
                console.error(`JSON Ëß£ÊûêÂ§±Ë¥•: ${parseError.message}, ËæìÂÖ•: ${rawJsonString}`);
                throw new Error(`Êó†ÊïàÁöÑ JSON Ê†ºÂºè: ${parseError.message}`);
            }
        } else {
            tradeData = eventBody;
            rawJsonString = JSON.stringify(eventBody);
        }

        // Áªü‰∏ÄÂ§ÑÁêÜ‰∏∫Êï∞ÁªÑ
        const tradeDataArray = Array.isArray(tradeData) ? tradeData : [tradeData];

        // Â§ÑÁêÜÊØè‰∏™‰∫§Êòì‰ø°Âè∑
        for (let trade of tradeDataArray) {
            // È™åËØÅÂøÖË¶ÅÂ≠óÊÆµ
            if (!trade.ticker || !trade.extras) {
                console.error(`Êó†ÊïàÁöÑ‰∫§ÊòìÊï∞ÊçÆÔºåÁº∫Â∞ë ticker Êàñ extras: ${JSON.stringify(trade)}`);
                continue;
            }

            // Ê†áÂáÜÂåñÊìç‰Ωú
            trade.action = normalizeAction(trade.action);

            // Â∞Ü timeframe ÁßªÂà∞ extras
            if (trade.timeframe) {
                if (!trade.extras) trade.extras = {};
                trade.extras.timeframe = trade.timeframe;
                delete trade.timeframe;
            }

            // Ê∏ÖÁêÜÂπ∂‰ªÖ‰øùÁïôÁ¨¨‰∏Ä‰∏™ indicator
            if (trade.extras && trade.extras.indicator) {
                const cleanedIndicator = cleanString(trade.extras.indicator);
                trade.extras.indicator = cleanedIndicator.split('\n')[0] || 'N/A';
                console.log(`Â§ÑÁêÜ ${trade.ticker} ÁöÑ indicator: ${trade.extras.indicator}`);
            } else {
                trade.extras.indicator = 'N/A';
                console.log(`Êú™ÊâæÂà∞ ${trade.ticker} ÁöÑ indicatorÔºåËÆæÁΩÆ‰∏∫ N/A`);
            }

            // Êõ¥Êñ∞ rawJsonString Áî®‰∫é TradersPost
            const updatedRawJsonString = JSON.stringify(trade);
            console.log(`ÈáçÁªÑÂêéÁöÑ JSON for ${trade.ticker}: ${updatedRawJsonString}`);

            // ËΩ¨ÂèëÂà∞ TradersPostÔºàÊéíÈô§ÊåáÂÆö tickerÔºâ
            if (!excludedTickers.includes(trade.ticker)) {
                try {
                    const forwardResult = await forwardToTradersPost(updatedRawJsonString);
                    console.log(`‰ø°Âè∑ËΩ¨ÂèëÂà∞ TradersPost ÊàêÂäü: ${trade.ticker}`, forwardResult);
                } catch (forwardError) {
                    console.error(`ËΩ¨Âèë ${trade.ticker} Âà∞ TradersPost Â§±Ë¥•:`, forwardError.message);
                }
            } else {
                console.log(`Ë∑≥Ëøá ${trade.ticker} ÁöÑ TradersPost ËΩ¨ÂèëÔºàÂú®ÊéíÈô§ÂàóË°®‰∏≠Ôºâ`);
            }

            // ÁîüÊàê Telegram Ê∂àÊÅØ
            const telegramMessage = formatTradeMessage(trade);
            console.log(`Telegram Ê∂àÊÅØ for ${trade.ticker}: ${telegramMessage}`);

            // ÁîüÊàê Discord ÂµåÂÖ•Ê∂àÊÅØ
            const discordEmbed = formatDiscordEmbed(trade);
            console.log(`Discord ÂµåÂÖ•Ê∂àÊÅØ for ${trade.ticker}: ${JSON.stringify(discordEmbed)}`);

            // ÂèëÈÄÅÂà∞ÁâπÂÆö ticker È¢ëÈÅì
            const tickerWebhook = tickerToDiscordWebhook[trade.ticker];
            if (tickerWebhook) {
                await sendDiscordMessage(tickerWebhook, discordEmbed);
                console.log(`ÂµåÂÖ•Ê∂àÊÅØÂèëÈÄÅÂà∞ ${trade.ticker} ÁâπÂÆöÈ¢ëÈÅì`);
            } else {
                console.warn(`Êú™ÊâæÂà∞ ${trade.ticker} ÁöÑ Discord Webhook`);
            }

            // ÂèëÈÄÅÂà∞ÊâÄÊúâ‰ø°Âè∑ÁöÑ Webhook
            await sendDiscordMessage(allSignalsWebhook, discordEmbed);
            console.log('ÂµåÂÖ•Ê∂àÊÅØÂèëÈÄÅÂà∞ÊâÄÊúâ‰ø°Âè∑ Webhook');

            // ÁîüÊàêÂπ∂ÂèëÈÄÅ‰∏≠ÊñáÊ∂àÊÅØ
            const chineseMessage = formatDiscordMessage(trade);
            console.log(`‰∏≠ÊñáÊ∂àÊÅØ for ${trade.ticker}: ${chineseMessage}`);
            for (let i = 0; i < 2; i++) {
                await sendChineseDiscordMessage(chineseWebhook1, chineseMessage);
                await sendChineseDiscordMessage(chineseWebhook2, chineseMessage);
                console.log(`‰∏≠ÊñáÊ∂àÊÅØ ${i + 1} ÂèëÈÄÅÂà∞‰∏§‰∏™ Webhook`);
            }

            // ÂèëÈÄÅ Telegram Ê∂àÊÅØ
            const ticker = trade.ticker;
            const photoUrl = tickerToPhoto[ticker];
            if (photoUrl) {
                try {
                    const result = await sendPhoto(chatId, photoUrl, telegramMessage);
                    console.log('Telegram ÂõæÁâáÂèëÈÄÅÊàêÂäü:', result);
                } catch (telegramError) {
                    console.error(`ÂèëÈÄÅ Telegram Ê∂àÊÅØÂ§±Ë¥• (${ticker}):`, telegramError.message);
                }
            } else {
                console.error(`Êú™ÊâæÂà∞ ${ticker} ÁöÑÂõæÁâá URL`);
            }
        }
    } catch (error) {
        console.error('Â§ÑÁêÜÊ∂àÊÅØÊó∂Âá∫Èîô:', error.message);
    }
}

// ÂØºÂá∫Â§ÑÁêÜ‰∫ã‰ª∂ÂáΩÊï∞
export default {
    async run({ steps, $ }) {
        const eventBody = steps.trigger.event.body;
        await handleMessage(eventBody);
    },
};
